@page "/passwordRecovery/{encryptedEmail}/{encryptedPasswordToken}"
@inject IAuthenticationService authService
@inject NavigationManager nav
@inject ISnackbar Snackbar
@using Application.Authentication
@using System.Text.RegularExpressions

@if (validLink)
{
    <MudGrid>
        <MudGrid Justify="Justify.Center" Spacing="2">
            <MudItem xs="5">
                <MudCard>
                    <MudCardContent>
                        @if (!resetDone)
                        {
                            <MudGrid Justify="Justify.Center">
                                <MudItem>
                                    <img src="./img/ucrLogo.jpg" height="200" width="275">
                                </MudItem>
                            </MudGrid>
                            <MudDivider DividerType="DividerType.Middle" />
                            <MudGrid Spacing="2" Justify="Justify.Center">
                                <MudItem>
                                    <MudText Class="ma-4" Typo="Typo.h5">Recuperación de contraseña</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.body1">Recuerde que la contraseña debe cumplir con los siguientes requisitos:</MudText>
                                </MudItem>
                            </MudGrid>
                            <MudGrid Class="ma-5">
                                <MudList Clickable="false" Dense="true">
                                    <MudListItem Text="Contener un mínimo de 8 caracteres" Icon="@Icons.Filled.Filter8" />
                                    <MudListItem Text="Contener al menos 1 mayúscula y 1 minúscula" Icon="@Icons.Filled.FormatSize" />
                                    <MudListItem Text="Contener al menos 1 número" Icon="@Icons.Filled.LooksOne" />
                                    <MudListItem Text="Contener al menos 1 caracter especial" Icon="@Icons.Filled.AlternateEmail" />
                                </MudList>
                            </MudGrid>
                            <MudForm @ref="form" @bind-IsValid="@isValid">
                                <MudTextField @bind-Value="newPassword" Immediate="true" Label="Contraseña nueva" Variant="Variant.Outlined" InputType="@newInput" Adornment="Adornment.End" AdornmentIcon="@newIcon" OnAdornmentClick="(() => showPassword(ref showNew, ref newInput, ref newIcon))" RequiredError="La contraseña nueva es requerida." Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" />
                                <MudTextField @bind-Value="newPasswordConfirm" Immediate="true" Label="Confirmar contraseña nueva" Variant="Variant.Outlined" InputType="@newInputConfirm" Adornment="Adornment.End" AdornmentIcon="@newIconConfirm" OnAdornmentClick="(() => showPassword(ref showNewConfirm, ref newInputConfirm, ref newIconConfirm))" RequiredError="Ingrese nuevamente la contraseña nueva." Validation="@(new Func<string, IEnumerable<string>>(PasswordMatch))" Required="true" />
                            </MudForm>
                            <MudGrid Justify="Justify.FlexEnd">
                                <MudItem Class="mt-4">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="@(!isValid)" Class="ml-auto ma-4" @onclick="resetPassword">Cambiar Contraseña</MudButton>
                                </MudItem>
                            </MudGrid>
                        }
                        else
                        {
                            <MudGrid Justify="Justify.Center">
                                <MudItem>
                                    <img src="./img/ucrLogo.jpg" height="200" width="275">
                                </MudItem>
                            </MudGrid>
                            <MudDivider DividerType="DividerType.Middle" />
                            <MudGrid Spacing="2" Justify="Justify.Center">
                                <MudItem>
                                    <MudText Class="ma-4" Typo="Typo.h5">Contraseña cambiada exitosamente.</MudText>
                                </MudItem>
                                <MudItem Class="mt-4">
                                    <MudButton Variant="Variant.Text" Color="Color.Secondary" Class="ml-auto" @onclick="goToSignIn">Iniciar sesión</MudButton>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudGrid>
}



@code {
    [Parameter] public string encryptedEmail { get; set; }
    [Parameter] public string encryptedPasswordToken { get; set; }
    public string passwordToken { get; set; }
    public string email { get; set; }
    public string newPassword { get; set; }
    public string newPasswordConfirm { get; set; }
    public string newIcon = Icons.Material.Filled.VisibilityOff;
    public string newIconConfirm = Icons.Material.Filled.VisibilityOff;

    public bool validLink { get; set; }
    public bool isValid { get; set; }
    public bool resetDone { get; set; }
    public bool passwordsDontMatch { get; set; }
    public bool showNew;
    public bool showNewConfirm;

    MudForm form;
    InputType newInput = InputType.Password;
    InputType newInputConfirm = InputType.Password;

    protected override async Task OnInitializedAsync()
    {

        email = authService.Decrypt(encryptedEmail, "recovery");
        bool validEmail = await authService.emailIsAlreadyRegistered(email);
        if (validEmail)
        {
            validLink = true;
        }

    }

    private void showPassword(ref bool box, ref InputType input, ref string icon)
    {
        @if (box)
        {
            box = false;
            icon = Icons.Material.Filled.VisibilityOff;
            input = InputType.Password;
        }
        else
        {
            box = true;
            icon = Icons.Material.Filled.Visibility;
            input = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Se necesita una contraseña!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "La contraseña debe contener al menos 8 caracteres";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "La contraseña debe contener al menos una mayúscula";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "La contraseña debe contener al menos una minúscula";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "La contraseña debe contener al menos un número";
        if (!Regex.IsMatch(pw, @"[^A-Za-z0-9]"))
            yield return "La contraseña debe contener al menos un caracter especial";
    }

    private IEnumerable<string> PasswordMatch(string arg)
    {
        if (string.IsNullOrWhiteSpace(arg))
        {
            yield return "Debe ingresar la confirmación de la contraseña.";
        }
        if (newPassword != arg)
            yield return "Las contraseñas no son iguales.";
    }

    private async Task resetPassword()
    {
        resetDone = await authService.resetPassword(email, newPassword, encryptedPasswordToken);
        if (!resetDone)
        {
            Snackbar.Add("Fallo inesperado.\nEs posible que su link haya expirado.", MudBlazor.Severity.Error);
        }
    }

    private void goToSignIn()
    {
        nav.NavigateTo("/signin");
    }
}
