@inject ResearchRepository.Application.Authentication.IAuthenticationService AuthenticationService
@inject ISnackbar Snackbar
@using System.Text.RegularExpressions

<MudContainer>
    <MudText Typo="Typo.h5">Cambio de contraseña</MudText>
    <MudDivider></MudDivider>
    <MudPaper Elevation="0" Class="d-flex mud-width-full py-8">
        <MudText Typo="Typo.body1">Recuerde que la contraseña debe cumplir con los siguientes requisitos:</MudText>
    </MudPaper>
    <MudGrid>
        <MudList Clickable="false" Dense="true">
            <MudListItem Text="Contener un mínimo de 8 caracteres" Icon="@Icons.Filled.Filter8" />
            <MudListItem Text="Contener al menos 1 mayúscula y 1 minúscula" Icon="@Icons.Filled.FormatSize" />
            <MudListItem Text="Contener al menos 1 número" Icon="@Icons.Filled.LooksOne" />
            <MudListItem Text="Contener al menos 1 caracter especial" Icon="@Icons.Filled.AlternateEmail" />
        </MudList>
    </MudGrid>
    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="oldPassword" Label="Contraseña actual" Immediate="true" Variant="Variant.Outlined" InputType="@oldInput" Adornment="Adornment.End" AdornmentIcon="@oldIcon" OnAdornmentClick="(() => showPassword(ref showOld,ref oldInput, ref oldIcon))" RequiredError="La contraseña actual es requerida." Required="true" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="newPassword" Label="Contraseña nueva" Immediate="true" Variant="Variant.Outlined" InputType="@newInput" Adornment="Adornment.End" AdornmentIcon="@newIcon" OnAdornmentClick="(() => showPassword(ref showNew,ref newInput, ref newIcon))" RequiredError="La contraseña nueva es requerida." Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="confirmNewPassword" Label="Confirmar contraseña nueva" Immediate="true" Variant="Variant.Outlined" InputType="@newInputConfirm" Adornment="Adornment.End" AdornmentIcon="@newIconConfirm" OnAdornmentClick="(() => showPassword(ref showNewConfirm,ref newInputConfirm, ref newIconConfirm))" RequiredError="Ingrese nuevamente la contraseña nueva." Validation="@(new Func<string, IEnumerable<string>>(PasswordMatch))"  Required="true"/>
            </MudItem>
        </MudGrid>
    </MudForm>
    <MudPaper Elevation="0" Class="d-flex align-right justify-right mud-width-full py-8">
        <MudButton @onclick="changePassword" Disabled="@(!success)" Variant="Variant.Filled" Color="Color.Secondary">Cambiar Contraseña</MudButton>
    </MudPaper>
    @if (changedPassword)
    {
        <MudAlert Severity="Severity.Success" ShowCloseIcon="true" CloseIconClicked="dismissMessages">¡La contraseña fue cambiada exitosamente!</MudAlert>
    }
    @if (failed)
    {
        if (passwordsDontMatch)
        {
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="dismissMessages">Las contraseñas deben coincidir.</MudAlert>
        }
        if (currentPasswordFailed)
        {
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="dismissMessages">La contraseña actual no es correcta.</MudAlert>
        }
        if (passwordsAreSame){
            <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="dismissMessages">La contraseña nueva no puede ser igual a la actual.</MudAlert>

        }
    }
</MudContainer>

@code {
    [Parameter] public string email { get; set; }

    private string oldPassword; bool showOld;
    private string newPassword; bool showNew;
    private string confirmNewPassword; bool showNewConfirm;

    MudForm form;
    InputType oldInput = InputType.Password;
    InputType newInput = InputType.Password;
    InputType newInputConfirm = InputType.Password;

    string oldIcon = Icons.Material.Filled.VisibilityOff;
    string newIcon = Icons.Material.Filled.VisibilityOff;
    string newIconConfirm = Icons.Material.Filled.VisibilityOff;

    bool changedPassword = false;
    bool failed = false;
    bool passwordsDontMatch = false;
    bool currentPasswordFailed = false;
    bool passwordsAreSame = false;
    bool success = false;

    private void showPassword(ref bool box, ref InputType input, ref string icon)
    {
        @if (box)
        {
            box = false;
            icon = Icons.Material.Filled.VisibilityOff;
            input = InputType.Password;
        }
        else
        {
            box = true;
            icon = Icons.Material.Filled.Visibility;
            input = InputType.Text;
        }
    }

    private async Task changePassword()
    {
        if (newPassword == confirmNewPassword)
        {
            var user = await AuthenticationService.getUserByEmail(email);
            if (await AuthenticationService.passwordIsValid(user, oldPassword)){
                if (oldPassword == newPassword){
                    failed = true;
                    passwordsAreSame = true;
                }
                else {
                    if (user != null && await AuthenticationService.ChangePassword(user, oldPassword, newPassword))
                    {
                        changedPassword = true;
                        oldPassword = "";
                        newPassword = "";
                        confirmNewPassword = "";
                    }
                    else
                    {
                        failed = true;
                    }
                }
            }
            else {
                failed = true;
                currentPasswordFailed = true;
            }
        }
        else
        {
            failed = true;
            passwordsDontMatch = true;
        }
    }

    private void dismissMessages()
    {
        changedPassword = false;
        failed = false;
        passwordsDontMatch = false;
        currentPasswordFailed = false;
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Se necesita una contraseña!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "La contraseña debe contener al menos 8 caracteres";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "La contraseña debe contener al menos una mayúscula";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "La contraseña debe contener al menos una minúscula";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "La contraseña debe contener al menos un número";
        if (!Regex.IsMatch(pw, @"[^A-Za-z0-9]"))
            yield return "La contraseña debe contener al menos un caracter especial";
    }

    private IEnumerable<string> PasswordMatch(string arg)
    {
        if (string.IsNullOrWhiteSpace(arg)) {
            yield return "Debe ingresar la confirmación de la contraseña.";
        }
        if (newPassword != arg)
            yield return "Las contraseñas no son iguales.";
    }

    private void verifyInfo() {

    }
}
