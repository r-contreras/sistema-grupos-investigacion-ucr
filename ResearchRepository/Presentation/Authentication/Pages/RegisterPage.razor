@page "/register"
@using Microsoft.AspNetCore.Identity.UI
@using ResearchRepository.Application.Authentication
@using ResearchRepository.Domain.Authentication.ValueObjects
@inject IAuthenticationService authService
@inject ISnackbar Snackbar
@inject NavigationManager nav
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations


<MudGrid>
    <MudGrid Justify="Justify.Center" Spacing="2">
        <MudItem xs=11>
            <MudCard>
                <MudCardContent>
                    <MudGrid Justify="Justify.Center">
                        <MudItem>
                            <img src="./img/ucrLogo.jpg" height="200" width="275">
                        </MudItem>
                    </MudGrid>
                    <MudDivider DividerType="DividerType.Middle" />
                    <MudGrid Spacing="2" Justify="Justify.Center">
                        <MudItem>
                            <MudText>Registre un nuevo usuario</MudText>
                        </MudItem>
                    </MudGrid>
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudGrid Spacing="1">
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="firstName" Label="Nombre" id="Nombre" Counter="30" Variant="Variant.Outlined"
                                              Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersName))"
                                              Required="true" RequiredError="Se necesita su primer nombre."></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="firstLastName" Label="Primer Apellido" id="Primer Apellido" Counter="30" Variant="Variant.Outlined"
                                              Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersName))"
                                              Required="true" RequiredError="Se necesita su primer apellido."></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="secondLastName" Label="Segundo Apellido" id="Segundo Apellido" Counter="30" Variant="Variant.Outlined"
                                              Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersName))"
                                              Required="true" RequiredError="Se necesita su segundo apellido."></MudTextField>
                            </MudItem>
                        </MudGrid>

                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudGrid Spacing="1">
                            <MudItem xs="12" sm="12" md="12">
                                <MudField Error="@(!_descriptionIsValid)" ErrorText="@errorMessage">
                                    <MudText Typo="Typo.body1" Class="mt-6 mb-2" Style="color:#808080;"> Descripción</MudText>
                                    <RadzenHtmlEditor @bind-Value="bio" Change="@OnDescriptionChange" Style="height:200px; max-width:auto">
                                        <RadzenHtmlEditorBold />
                                        <RadzenHtmlEditorItalic />
                                        <RadzenHtmlEditorUnderline />
                                        <RadzenHtmlEditorStrikeThrough />
                                        <RadzenHtmlEditorLink />
                                        <RadzenHtmlEditorUnlink />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorColor />
                                        <RadzenHtmlEditorFontSize />
                                        <RadzenHtmlEditorOrderedList />
                                        <RadzenHtmlEditorUnorderedList />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorRemoveFormat />

                                    </RadzenHtmlEditor>
                                </MudField>
                            </MudItem>
                        </MudGrid>
                        <br>

                        <MudGrid>
                            <MudItem xs="4" sm="2" md="2">
                                <MudTextField @bind-Value="deg" Label="Titular" id="Titular" Variant="Variant.Outlined" Counter="30"
                                              Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersName))"
                                              Required="true" RequiredError="Se necesita su título."></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="title" Label="Grado Académico" id="Grado Académico" Counter="30"
                                              Immediate="true" Required="true" RequiredError="Se necesita su grado academico." Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            <MudItem xs="4" sm="2" md="2">
                                <MudTextField @bind-Value="country" Label="País" id="País" Counter="30" Variant="Variant.Outlined"
                                              Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersName))"
                                              Immediate="true" Required="true" RequiredError="Se necesita su país."></MudTextField>
                            </MudItem>
                        </MudGrid>

                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudGrid>
                            <MudItem xs="4" sm="2" md="4">
                                <MudTextField Variant="Variant.Outlined" T="string" @ref="uni" Label="Universidad Principal" id="Universidad Principal"
                                              Immediate="true" Counter="30" Required="true" RequiredError="Se necesita su universidad." />
                            </MudItem>
                            <MudItem xs="4" sm="2" md="4">
                                <MudTextField Variant="Variant.Outlined" T="string" @ref="unit" Immediate="true" Label="Unidad Académica Principal" Counter="30" />
                            </MudItem>
                        </MudGrid>
                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                        <MudGrid Spacing="1">
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField Variant="Variant.Outlined" T="string" @ref="email" Immediate="true" Label="Email" id="Email" Required="true" RequiredError="Se necesita una dirección email."
                                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "Dirección email invalida."})" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField Variant="Variant.Outlined" T="string" Label="Contraseña" id="Contraseña" Immediate="true" HelperText="Debe contener una mayúscula, minuscula, numero y caracter especial" @ref="pwField1"
                                              InputType="@PasswordInput2" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon2" OnAdornmentClick="togglePass2"
                                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                              RequiredError="La contraseña es requerida." />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField Variant="Variant.Outlined" T="string"
                                              Label="Contraseña" id="Contraseña2" @ref="pwField2" HelperText="Repita la contraseña." Immediate="true" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="togglePass"
                                              Required="true" RequiredError="Debe ingresar nuevamente la contraseña." Validation="@(new Func<string, string>(PasswordMatch))" />
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudCardContent>
                <MudCardActions>

                    <MudCheckBox @bind-Checked="@_checkbox" Label="No soy un robot" Color="Color.Primary"></MudCheckBox>
                    @if (_checkboxMessage)
                    {
                        <MudItem md="4" Class="ma-4">
                            <MudAlert Icon="@Icons.Outlined.CheckBox" Severity="Severity.Normal" Variant="Variant.Outlined" Dense="true" Class="my-2" ContentAlignment="HorizontalAlignment.Center"> Confirme que no es un robot. </MudAlert>
                        </MudItem>
                    }
                    <MudButton Variant="Variant.Filled" id="registerButton" Color="Color.Secondary" Disabled="@(!success)" Class="ml-auto" @onclick="sendRequest">Registrarse</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudGrid>


@code {
    protected override async Task OnInitializedAsync()
    {
        //Register r = new Register("test@gmail.com", "Contrasena12.", "Contrasena12.");
        //await authService.RegisterRequestAsync(r);
    }


    bool isShow;
    bool isShow2;
    bool _checkbox;
    bool _checkboxMessage;
    bool success;
    string[] errors = { };
    string firstName;
    string firstLastName;
    string secondLastName;
    MudTextField<string> email;
    MudTextField<string> pwField1;
    MudTextField<string> pwField2;
    MudTextField<string> uni;
    MudTextField<string> unit;
    string deg;
    string title;
    string bio;
    string country;
    MudForm form;
    InputType PasswordInput = InputType.Password;
    InputType PasswordInput2 = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    string PasswordInputIcon2 = Icons.Material.Filled.VisibilityOff;

    private bool _descriptionIsValid = false;
    private string? errorMessage;

    private IEnumerable<string> MaxCharactersName(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 30 < ch?.Length)
            yield return "Se permiten únicamente 30 caractéres";
    }

    private IEnumerable<string> MaxCharactersDescription(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 500 < ch?.Length)
            yield return "Se permiten únicamente 30 caractéres";
    }

    void togglePass()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }

    }
    void togglePass2()
    {
        @if (isShow2)
        {
            isShow2 = false;
            PasswordInputIcon2 = Icons.Material.Filled.VisibilityOff;
            PasswordInput2 = InputType.Password;
        }
        else
        {
            isShow2 = true;
            PasswordInputIcon2 = Icons.Material.Filled.Visibility;
            PasswordInput2 = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Se necesita una contraseña!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "La contraseña debe contener al menos 8 caracteres";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "La contraseña debe contener al menos una mayúscula";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "La contraseña debe contener al menos una minúscula";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "La contraseña debe contener al menos un número";
        if (!Regex.IsMatch(pw, @"[^A-Za-z0-9]"))
            yield return "La contraseña debe contener al menos un carácter especial";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Las contraseñas no son iguales.";
        return null;
    }
    private void OnDescriptionChange(string description)
    {
        _descriptionIsValid = false;
        if (description == null || description.Length < 1)
            errorMessage = "Debe contener una descripción.";
        else if (description.Length > 500)
            errorMessage = "La descripción ha excedido el límite.";
        else
            _descriptionIsValid = true;

    }

    private async Task sendRequest()
    {
        if (_checkbox)
        {

            Register r = new Register(firstName, firstLastName, secondLastName,
                email.Value, pwField1.Value, pwField2.Value, uni.Value, unit.Value, deg, title, bio, country);
            bool success = await authService.RegisterRequestAsync(r);
            if (success)
            {
                Snackbar.Add("Cuenta creada exitosamente!", MudBlazor.Severity.Success);
                var encryptedEmail = authService.EncryptString(email.Value, "confirm");
                string destiny = "/confirmAccount/" + encryptedEmail;
                nav.NavigateTo(destiny);
            }
            else
            {
                Snackbar.Add("Fallo inesperado.\nIntente más tarde.", MudBlazor.Severity.Error);
            }

        }
        else
        {
            _checkboxMessage = true;
        }
    }


}
