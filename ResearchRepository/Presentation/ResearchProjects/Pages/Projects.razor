@page "/proyectos/{idGroup:int}"

@using ResearchRepository.Domain.InvestigationProjects.Entities
@using ResearchRepository.Presentation.Core.Components

@inject IResearchGroupService groupService
@inject IInvestigationProjectService InvestigationProjectService
@inject IMenuState menuState


@if (_isLoading)
{
    <LoadingResearchGroups></LoadingResearchGroups>
}
else
{
    <SearchSection PlaceHolder="Buscar proyectos" Items="_items" ValueChanged="ValueChanged" ></SearchSection>
    <MudGrid>
        @if (_hasResults)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.body2">Página 1 de @totalPages (Total de resultados: @totalItems)</MudText>
            </MudItem>
            <MudGrid Justify="Justify.Center">
                @foreach (var a in projects)
                {
                    <MudItem xs="4">
                        <ProjectCard title="@a.Name.ToString()" description="@(a.Description.ToString())" link="@($"/infoProject/{a.Id.ToString()}")" _project="@a"></ProjectCard>
                    </MudItem>
                }
                <MudItem xs="12" Class="text-centered">
                    <Pagination totalPagesQuantity="totalPages" currentPage="currentPageNumber" radius="2" selectedPage="SelectedPage" />
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No hay resultados para: <strong>@searchText</strong></MudAlert>
            </MudItem>
        }
    </MudGrid>
}


@code {
    [Parameter]
    public int idGroup { get; set; }

    private bool _isLoading = true;
    private bool _hasResults = true;
    private IEnumerable<InvestigationProject>? projects;
    private string searchText = "";
    private double totalItems;

    //paging
    [Parameter]
    public int currentPageNumber { get; set; } = 1;
    private int itemsPerPage = 9;
    private int totalPages;
    private ResearchGroup? group = null;

    private List<BreadcrumbItem> _items;


    protected override async Task OnInitializedAsync()
    {
        await loadGroupInfo();
        if (group != null)
        {
            _items = new List<BreadcrumbItem>
        {
                new BreadcrumbItem("CITIC", href: "/"),
                new BreadcrumbItem("Grupos de Investigación", href: "/grupos"),
                new BreadcrumbItem(group.Name.Value, href:"/grupos/"+group.Id),
                new BreadcrumbItem("Proyectos de Investigación", href: null, disabled: true)
            };

        }
        menuState.SetDisplayGroupMenu(true, idGroup);
        totalItems = await InvestigationProjectService.GetActiveProjectsCountAsync(idGroup);
        _hasResults = totalItems > 0 ? true : false;
        if (_hasResults)
        {
            totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
            projects = await InvestigationProjectService.GetActiveProjectsPagedAsync(
                currentPageNumber, itemsPerPage, idGroup);
            _isLoading = false;
        }
        else
        {
            _isLoading = false;
        }

    }

    /// <summary>
    /// When a link in the pagination component is clicked this function is called.
    /// Depending of the search term updates the view.
    /// </summary>
    /// <param name="page">Number of the page to search</param>
    /// <returns></returns>
    private async Task SelectedPage(int page)
    {
        currentPageNumber = page;

        if (searchText.Equals(""))
        {
            await OnInitializedAsync();
        }
        else
        {
            totalItems = await InvestigationProjectService.GetProjectsByTermCountAsync(searchText, idGroup);
            _hasResults = totalItems > 0 ? true : false;
            if (_hasResults)
            {
                totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
                projects = await InvestigationProjectService.GetProjectsByTermPagedAsync(currentPageNumber, itemsPerPage, searchText, idGroup);
            }
        }
    }

    /// <summary>
    /// When the user enters a value in the SearchBar component this function is called.
    /// Updates the current search term and call SelectedPage() so display the new list.
    /// </summary>
    /// <param name="searchTerm">Search term that the user inserted</param>
    /// <returns>async task</returns>
    private async Task ValueChanged(String searchTerm)
    {
        searchText = searchTerm;
        if (searchText is not null)
        {

            await SelectedPage(1);
        }
        else
        {
            await OnInitializedAsync();
        }

    }

    private async Task loadGroupInfo()
    {
        group = await groupService.GetById(idGroup);
    }
}
