@using Domain.Contacts.Entities
@using Application.Contacts
@using Presentation.Contacts.Components
@inject IContactsService contactService
@inject ISnackbar Snackbar
@inject IWebConfigService webConfigService

@if (totalContacts != 0)
{
    <MudTable id="contacts" Items="@tidings" T="Contact" Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedItem" Elevation="0">
        <ToolBarContent>
            <MudGrid Class="mb-2">
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Contactos de este grupo</MudText>
                </MudItem>
                <MudItem xs="8">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ToggleCreate" Size="Size.Small">Crear nuevo contacto</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <SearchBar PlaceHolder="Buscar por correo" ValueChanged="ValueChanged"></SearchBar>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nombre de contacto</MudTh>
            <MudTh>Correo de contacto</MudTh>
            <MudTh>Teléfono de contacto</MudTh>
            <MudTh>Fecha Inicio</MudTh>
            <MudTh>Fecha Fin</MudTh>
            <MudTh>Principal</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombre de contacto">@context.Name</MudTd>
            <MudTd DataLabel="Correo de contacto">@context.Email</MudTd>
            <MudTd DataLabel="Teléfono de contacto">@context.Telephone</MudTd>
            <MudTd DataLabel="Fecha Inicio">@context.StartDate.ToShortDateString()</MudTd>
            <MudTd DataLabel="Fecha Fin">@context.EndDate.ToShortDateString()</MudTd>
            <MudTd DataLabel="Principal">
                <SwitchMainContact isActive="@context.MainContact" idContact="@context.Id" idGroup="@Group.Id" OnValidSubmit="EditMain"></SwitchMainContact>
            </MudTd>
            <MudTd DataLabel="Acciones">
                <MudButtonGroup Size="Size.Small">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => DisplayEditContacts(@context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DisplayDeleteContacts(@context))"></MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            @if (_hasResults)
            {
                <MudGrid Justify="Justify.Center">
                    <MudItem Class="mt-3">
                        <Pagination currentPage="@currentPageNumber" radius="2" selectedPage="SelectedPage" totalPagesQuantity="@totalPages" />
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudAlert Severity="Severity.Info">No hay resultados para: <strong>@searchText</strong></MudAlert>
            }
        </PagerContent>
    </MudTable>

    <!-- DELETE -->
    <Overlay IsOpen="_displayDelete">
        <MudGrid>
            @if (selectedItem != null)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">¿Esta seguro que desea eliminar el contacto: @selectedItem.Name?</MudText>
                </MudItem>
            }
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="@(e => DeleteContacts())">Borrar contacto</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(e => ToggleDelete())">Cerrar sin borrar</MudButton>
            </MudItem>
        </MudGrid>
    </Overlay>

    <!-- EDIT -->
    <Overlay IsOpen="_displayEdit">
        <MudGrid Class="pa-5">
            <ContactsForm Tiding="@selectedItem" PositiveText="Editar contacto" NegativeText="Cerrar sin editar" OnClose="ToggleEdit" OnValidSubmit="EditContacts" Group="@Group" />
        </MudGrid>
    </Overlay>

    <!-- CREATE -->
    <Overlay IsOpen="_displayCreate">
        <MudGrid Class="pa-5">
            <ContactsForm Tiding="@selectedItem"
                          PositiveText="Crear contacto" NegativeText="Cerrar sin crear" OnClose="ToggleCreate" OnValidSubmit="CreateContacts" Group="@Group" />
        </MudGrid>
    </Overlay>
}
else
{
    <MudItem xs="8">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ToggleCreate">Agregar contactos </MudButton>
    </MudItem>
    <MudText Typo="Typo.h6">No se encuentran contactos</MudText>

    <Overlay IsOpen="_displayCreate">
        <MudGrid Class="pa-5">
            <ContactsForm Tiding="@selectedItem"
                          PositiveText="Crear contacto" NegativeText="Cerrar sin crear" OnClose="ToggleCreate" OnValidSubmit="CreateContacts" Group="@Group" />
        </MudGrid>
    </Overlay>
}

@code {
    [Parameter]
    public ResearchGroup? Group { get; set; }
    private string searchText = "";
    private int currentPageNumber = 1;
    private int itemsPerPage = 5;
    private int totalPages;
    private double totalItems;
    private double totalContacts;
    private bool _hasResults = true;

    private bool _displayEdit = false;
    private bool _displayDelete = false;
    private bool _displayCreate = false;
    private IEnumerable<Contact>? tidings;
    private Contact selectedItem = null;
    private DateTime? publicationDate = null;
    private DateTime? endDate = null;


    protected override async Task OnInitializedAsync()
    {
        if (Group is null)
            throw new ArgumentNullException(nameof(Group));

        if (webConfigService.ValueExists("itemsPerPageAdmin"))
        {
            itemsPerPage = webConfigService.GetIntValue("itemsPerPageAdmin");
        }

        totalItems = await contactService.GetContactsByGroupCount(Group);
        _hasResults = totalItems > 0 ? true : false;
        totalContacts = await contactService.GetContactsByGroupCount(Group);
        if (_hasResults)
        {
            totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
            tidings = await contactService.GetContactsByGroupPaged(Group, currentPageNumber, itemsPerPage);
        }
    }

    /// <summary>
    /// When the user enters a value in the SearchBar component this function is called.
    /// Updates the current search term and call SelectedPage() so display the new list.
    /// </summary>
    /// <param name="searchTerm">Search term that the user inserted</param>
    /// <returns>async task</returns>
    private async Task ValueChanged(String searchTerm)
    {
        searchText = searchTerm;
        Task.Run(async () => await SelectedPage(1)).Wait();
    }

    /// <summary>
    /// Hide or display Edit Contact Form
    /// </summary>
    private void ToggleEdit()
    {
        _displayEdit = !_displayEdit;
    }

    /// <summary>
    /// Hide or display Create Contact Form
    /// </summary>
    private void ToggleCreate()
    {
        //Reset info
        selectedItem = null;
        publicationDate = DateTime.Now;
        endDate = DateTime.Now;

        _displayCreate = !_displayCreate;
    }

    /// <summary>
    /// Display or hide Delete Contact
    /// </summary>
    private void ToggleDelete()
    {
        _displayDelete = !_displayDelete;
    }

    /// <summary>
    /// Display the form to edit contacts
    /// </summary>
    /// <param name="contact">Contact that will be edited</param>
    private void DisplayEditContacts(Contact contact)
    {
        selectedItem = contact;

        publicationDate = selectedItem.StartDate;
        endDate = selectedItem.EndDate;
        ToggleEdit();
    }

    /// <summary>
    /// Display the overlay to delete a given Contact
    /// </summary>
    /// <param name="contact">Contact to delete</param>
    private void DisplayDeleteContacts(Contact contact)
    {
        selectedItem = contact;
        ToggleDelete();
    }

    /// <summary>
    /// Delete Contact that match with the selectedItem
    /// </summary>
    private async void DeleteContacts()
    {
        ToggleDelete();
        await contactService.DeleteContactsAsync(selectedItem);

        tidings = await contactService.GetContactsByTermPaged(Group, currentPageNumber, itemsPerPage, "");

        await OnInitializedAsync();
        Snackbar.Add("El contacto ha sido borrado con éxito.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Delete; });

        StateHasChanged();
    }

    /// <summary>
    /// Edit the Contact that matches the seletedItem
    /// </summary>
    private async void EditContacts(Contact contact)
    {
        ToggleEdit();
        //Call service
        await contactService.SaveContactsAsync(contact);

        Task Update = Task.Run(async ()
        => tidings = await contactService.GetContactsByTermPaged(Group, currentPageNumber, itemsPerPage, ""));
        Task.WaitAll(Update);
        await OnInitializedAsync();

        Snackbar.Add("El contacto ha sido editado con éxito.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Edit; });

        StateHasChanged();
    }

    private async void EditMain(Contact contact)
    {
        //Call service
        await contactService.SaveContactsAsync(contact);


        tidings = await contactService.GetContactsByTermPaged(Group, currentPageNumber, itemsPerPage, "");
        List<Contact> list = tidings.ToList();

        foreach (var xd in list)
        {

            if (xd.Id != contact.Id)
                xd.ChangeStateMainContact(false);
        }

        await OnInitializedAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Create Contact and added to the database
    /// </summary>
    private async void CreateContacts(Contact contact)
    {

        await contactService.SaveContactsAsync(contact);

        ToggleCreate();
        //Call service


        tidings = await contactService.GetContactsByTermPaged(Group, currentPageNumber, itemsPerPage, "");
        List<Contact> list = tidings.ToList();

        if(list.Count == 1)
        {
            list.ElementAt(0).ChangeStateMainContact(true);
        }

    

        await OnInitializedAsync();
        Snackbar.Add("El contacto ha sido creado con éxito.", Severity.Success);

        StateHasChanged();
    }

    /// <summary>
    /// When a link in the pagination component is clicked this function is called.
    /// Depending of the search term updates the view.
    /// </summary>
    /// <param name="page">Number of the page to search</param>
    /// <returns></returns>
    private async Task SelectedPage(int page)
    {
        currentPageNumber = page;

        if (searchText.Equals(""))
        {
            await OnInitializedAsync();
        }
        else
        {
            totalItems = await contactService.GetContactsByTermCount(Group, searchText);
            _hasResults = totalItems > 0 ? true : false;
            if (_hasResults)
            {
                totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
                tidings = await contactService.GetContactsByTermPaged(Group, currentPageNumber, itemsPerPage, searchText);
            }
            else
            {
                tidings = new List<Contact>();
            }
        }
    }
}
