@using Domain.ResearchNews.Entities
@using Application.ResearchNews
@using Presentation.ResearchNews.Components
@using ResearchRepository.Domain.ResearchNews.DTOs
@inject INewsService newsService
@inject ISnackbar Snackbar
@inject ISubscriptionsService _subService
@inject IWebConfigService webConfigService
@*
    The table needs a IEnumerable<T> of type T, in this case T is the entity News, with this the component creates the new.

    @context is a instanace of the type T, we can use that to edit or update a given item. We use a NewsModel to update the data in the database.

*@
@if (tidings != null)
{
    <MudTable Items="@tidings" T="NewsDTO" Hover="true" Bordered="true" Striped="true" @bind-SelectedItem="selectedItem" Elevation="0">
        <ToolBarContent>
            <MudGrid Class="mb-2">
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Noticias de este grupo</MudText>
                </MudItem>
                <MudItem xs="8">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ToggleCreate" Size="Size.Small">Crear nueva noticia</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <SearchBar PlaceHolder="Buscar por titulo" ValueChanged="ValueChanged"></SearchBar>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Titulo</MudTh>
            <MudTh>Fecha Creación</MudTh>
            <MudTh>Fecha Publicación</MudTh>
            <MudTh>Fecha Fin Publicación</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Titulo"><MudLink Underline="Underline.Always" Href="@($"/newsInfo/{context.Id}")" Target="_blank"> @context.Title</MudLink></MudTd>
            <MudTd DataLabel="Fecha Creación">@context.CreationDate</MudTd>
            <MudTd DataLabel="Fecha Publicación">@context.PublicationDate</MudTd>
            <MudTd DataLabel="Fecha Fin Publicación">@context.EndDate</MudTd>
            <MudTd DataLabel="Acciones">
                <MudButtonGroup Size="Size.Small">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => DisplayEditNews(@context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DisplayDeleteNews(@context))"></MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            @if (_hasResults)
            {
                <MudGrid Justify="Justify.Center">
                    <MudItem Class="mt-3">
                        <Pagination currentPage="@currentPageNumber" radius="2" selectedPage="SelectedPage" totalPagesQuantity="@totalPages" />
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudAlert Severity="Severity.Info">No hay resultados para: <strong>@searchText</strong></MudAlert>
            }
        </PagerContent>
    </MudTable>
}
else
{
    <MudText Class="ml-4">Este grupo no tiene noticias. </MudText>
    <MudItem Class="ml-4" xs="8">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ToggleCreate" Size="Size.Small">Crear nueva noticia</MudButton>
    </MudItem>
}
<!-- DELETE NEWS -->
<Overlay IsOpen="_displayDelete">
    <MudGrid>
        @if (selectedItem != null)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5">¿Esta seguro que desea eliminar la noticia: @selectedItem.Title?</MudText>
            </MudItem>
        }
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="@(e => DeleteNews())">Borrar Noticia</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(e => ToggleDelete())">Cerrar sin borrar</MudButton>
        </MudItem>
    </MudGrid>
</Overlay>

<!-- EDIT NEWS -->
<Overlay IsOpen="_displayEdit">
    <MudGrid Class="pa-5">
        <NewsForm NewsId="@selectedItem!.Id" PositiveText="Editar noticia" NegativeText="Cerrar sin editar" OnClose="ToggleEdit" OnValidSubmit="EditNews" Group="@Group" />
    </MudGrid>
</Overlay>

<!-- CREATE NEWS -->
<Overlay IsOpen="_displayCreate">
    <MudGrid Class="pa-5">
        <NewsForm PositiveText="Crear noticia" NegativeText="Cerrar sin crear" OnClose="ToggleCreate" OnValidSubmit="CreateNews" Group="@Group" />
    </MudGrid>
</Overlay>


@code {
    [Parameter]
    public ResearchGroup? Group { get; set; }
    [Parameter]
    public int GroupId { get; set; }
    private string searchText = "";
    private int currentPageNumber = 1;
    private int itemsPerPage = 5;
    private int totalPages;
    private double totalItems;
    private bool _hasResults = false;

    private bool _displayEdit = false;
    private bool _displayDelete = false;
    private bool _displayCreate = false;
    private IEnumerable<NewsDTO>? tidings;
    private NewsDTO? selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        if (Group is null)
            throw new ArgumentNullException(nameof(Group));

        if (webConfigService.ValueExists("itemsPerPageAdmin"))
        {
            itemsPerPage = webConfigService.GetIntValue("itemsPerPageAdmin");
        }

        totalItems = await newsService.GetNewsByGroupCount(Group);
        _hasResults = totalItems > 0 ? true : false;
        if (_hasResults)
        {
            totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
            tidings = await newsService.GetNewsByGroupIdPagedAsync(Group.Id, currentPageNumber, itemsPerPage);
        }
    }

    /// <summary>
    /// When the user enters a value in the SearchBar component this function is called.
    /// Updates the current search term and call SelectedPage() so display the new list.
    /// </summary>
    /// <param name="searchTerm">Search term that the user inserted</param>
    /// <returns>async task</returns>
    private async Task ValueChanged(String searchTerm)
    {
        searchText = searchTerm;
        Task.Run(async () => await SelectedPage(1)).Wait();
    }

    /// <summary>
    /// Hide or display Edit News Form
    /// </summary>
    private void ToggleEdit()
    {
        _displayEdit = !_displayEdit;
    }

    /// <summary>
    /// Hide or display Create News Form
    /// </summary>
    private void ToggleCreate()
    {
        //Reset info
        selectedItem = null;

        _displayCreate = !_displayCreate;
    }

    /// <summary>
    /// Display or hide Delete News
    /// </summary>
    private void ToggleDelete()
    {
        _displayDelete = !_displayDelete;
    }

    /// <summary>
    /// Display the form to edit news
    /// </summary>
    /// <param name="news">News that will be edited</param>
    private void DisplayEditNews(NewsDTO news)
    {
        selectedItem = news;
        ToggleEdit();
    }

    /// <summary>
    /// Display the overlay to delete a given News
    /// </summary>
    /// <param name="news">News to delete</param>
    private void DisplayDeleteNews(NewsDTO news)
    {
        selectedItem = news;
        ToggleDelete();
    }

    /// <summary>
    /// Delete news that match with the selectedItem
    /// </summary>
    private async void DeleteNews()
    {
        ToggleDelete();
        News? deletedNews = await newsService.GetNewsByIdAsync(selectedItem!.Id);
        await newsService.DeleteNewsAsync(deletedNews!);
        tidings = await newsService.GetNewsByTermPagedAsync(Group!.Id, currentPageNumber, itemsPerPage, "");
        Snackbar.Add("La noticia ha sido borrada con éxito.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Delete; });
        StateHasChanged();
    }

    /// <summary>
    /// Edit the news that matches the seletedItem
    /// </summary>
    private async void EditNews(News news)
    {
        ToggleEdit();
        //Call service
        await newsService.EditNewsAsync(news);
        tidings = await newsService.GetNewsByTermPagedAsync(Group!.Id, currentPageNumber, itemsPerPage, "");
        Snackbar.Add("La noticia ha sido editada con éxito.", Severity.Success, config => { config.Icon = Icons.Material.Filled.Edit; });

        StateHasChanged();
    }

    /// <summary>
    /// Create news and added to the database
    /// </summary>
    private async void CreateNews(News news)
    {
        ToggleCreate();
        //Call service
        await newsService.CreateNewsAsync(news);
        tidings = await newsService.GetNewsByTermPagedAsync(Group!.Id, currentPageNumber, itemsPerPage, "");
        Snackbar.Add("La noticia ha sido creada con éxito.", Severity.Success);
        await _subService.NotifySubscriptors(GroupId, Group.Name.Value,"UCR-Nueva Noticia-Sistema Grupos de Investigación.", "http://10.1.4.119/noticias/" + GroupId.ToString());
        StateHasChanged();
    }

    /// <summary>
    /// When a link in the pagination component is clicked this function is called.
    /// Depending of the search term updates the view.
    /// </summary>
    /// <param name="page">Number of the page to search</param>
    /// <returns></returns>
    private async Task SelectedPage(int page)
    {
        currentPageNumber = page;

        if (searchText.Equals(""))
        {
            await OnInitializedAsync();
        }
        else
        {
            totalItems = await newsService.GetNewsByTermCount(Group!, searchText);
            _hasResults = totalItems > 0 ? true : false;
            if (_hasResults)
            {
                totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
                tidings = await newsService.GetNewsByTermPagedAsync(Group!.Id, currentPageNumber, itemsPerPage, searchText);
            }
            else
            {
                tidings = new List<NewsDTO>();
            }
        }
    }
}
