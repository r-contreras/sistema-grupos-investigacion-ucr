@page "/noticias/{idGroup:int}"

@using ResearchRepository.Application.ResearchGroups
@using ResearchRepository.Domain.ResearchGroups
@using ResearchRepository.Application.ResearchNews
@using ResearchRepository.Domain.ResearchNews.DTOs
@using ResearchRepository.Domain.ResearchNews.Entities

@inject INewsService NewsService
@inject IMenuState menuState
@inject IResearchGroupService GroupService

@if (_isLoading)
{
    <LoadingBreadcrumbs></LoadingBreadcrumbs>
    <LoadingCardList></LoadingCardList>
}
else
{
    <SearchSection PlaceHolder="Buscar noticia" Items="_items" ValueChanged="ValueChanged"></SearchSection>
    <MudGrid>
        @if (_hasResults)
        {
            <div id="top"></div>
            <MudItem xs="12" id="banner">
                <MudText Typo="Typo.body2">Página @currentPageNumber de @totalPages (Total de resultados: @totalItems)</MudText>
            </MudItem>
            <MudGrid Justify="Justify.Center">
                @foreach (var n in dtos)
                {
                    <MudItem xs="10" >
                        <NewsCard News="@n"></NewsCard>
                    </MudItem>
                }
            </MudGrid>
            <MudItem xs="12" Class="text-centered">
                <Pagination totalPagesQuantity="totalPages" currentPage="currentPageNumber" radius="2" selectedPage="SelectedPage" />
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No hay resultados para: <strong>@searchText</strong></MudAlert>
            </MudItem>
        }
    </MudGrid>
}



@code {

    [Parameter]
    public int idGroup { get; set; }

    private ResearchGroup myGroup { get; set; }
    private bool _isLoading = true;
    private bool _hasResults = true;
    private IEnumerable<NewsDTO>? dtos;
    private string searchText = "";
    private double totalItems;

    //paging
    [Parameter]
    public int currentPageNumber { get; set; } = 1;
    private int itemsPerPage = 3;
    private int totalPages;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
        new BreadcrumbItem("CITIC", href: "/"),
        new BreadcrumbItem("Grupos de Investigación", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        menuState.SetDisplayGroupMenu(true, idGroup);
        myGroup = await GroupService.GetById(idGroup);
        totalItems = await NewsService.GetNewsByGroupCount(myGroup);
        _hasResults = totalItems > 0 ? true : false;
        if (_hasResults)
        {
            totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
            dtos = await NewsService.GetNewsByGroupIdPagedAsync(idGroup, currentPageNumber, itemsPerPage);
            _isLoading = false;
        }
        else
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// When a link in the pagination component is clicked this function is called.
    /// Depending of the search term updates the view.
    /// </summary>
    /// <param name="page">Number of the page to search</param>
    /// <returns></returns>
    private async Task SelectedPage(int page)
    {
        currentPageNumber = page;

        if (searchText.Equals("") || searchText == null)
        {
            await OnInitializedAsync();
        }
        else
        {
            totalItems = await NewsService.GetNewsByTermCount(myGroup, searchText);
            _hasResults = totalItems > 0 ? true : false;
            if (_hasResults)
            {
                totalPages = (int)Math.Ceiling(totalItems / itemsPerPage);
                dtos = await NewsService.GetNewsByTermPagedAsync(idGroup, currentPageNumber, itemsPerPage, searchText);
            }
        }        
    }

    /// <summary>
    /// When the user enters a value in the SearchBar component this function is called.
    /// Updates the current search term and call SelectedPage() so display the new list.
    /// </summary>
    /// <param name="searchTerm">Search term that the user inserted</param>
    /// <returns>async task</returns>
    private async Task ValueChanged(String searchTerm)
    {
        searchText = searchTerm;
        await SelectedPage(1);
    }

}
