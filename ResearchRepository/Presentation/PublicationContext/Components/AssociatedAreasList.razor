@using ResearchRepository.Domain.ResearchAreas.Entities;
@using ResearchRepository.Domain.ResearchGroups.Entities;
@using Domain.Core.Exceptions;
@using ResearchRepository.Application.ResearchAreas;
@using ResearchRepository.Application.PublicationContext;
@using ResearchRepository.Domain.PublicationContext;
@inject IPublicationService PublicationService
@inject IResearchAreaService ResearchAreaService

<MudItem xs="10">

    <AuthorizeView Roles="Administrador, Administrador De Grupo, Administrador De Centro">

        <!-- Shown to authorized users only -->
        <Authorized>
            <MudChipSet Class="mb-6 ml-4" AllClosable="true" OnClose="DeassociateAreasFromPublication">
                @if (_areas != null && _areas.Count() > 0)
                {
                    @foreach (var area in _areas)
                    {
                        <MudChip Text="@area.Name.ToString()" Color="Color.Secondary" Variant="Variant.Text"></MudChip>
                    }
                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Secondary" OnClick="@(async () => await AddAreaToPublication())"></MudIconButton>
                }
                else
                {
                    <MudText Class="ml-4">Esta publicación no tiene áreas de investigación asociadas. </MudText>
                    <MudButton Class="ml-4" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Secondary" OnClick="@(async () => await AddAreaToPublication())">Agregar subáreas</MudButton>
                }
            </MudChipSet>
        </Authorized>

        <!-- Shown to visitors -->
        <NotAuthorized>
            <MudChipSet Class="mb-6 ml-4" AllClosable="false" ReadOnly="true">
                @if (_areas != null && _areas.Count() > 0)
                {
                    @foreach (var area in _areas)
                    {
                        <MudChip Text="@area.Name.ToString()" Color="Color.Secondary" Variant="Variant.Text"></MudChip>
                    }
                }
                else
                {
                    <MudText Class="ml-4">Esta publicación no tiene áreas de investigación asociadas. </MudText>
                }
            </MudChipSet>
        </NotAuthorized>

    </AuthorizeView>

    <Overlay IsOpen="_newArea">
        <AssociatedAreas Publication="currentPublication" ToggleOverlay="ToggleOverlay" _publicationsAreas="_areas" RefreshStateComponent="@RefreshState" />
    </Overlay>

</MudItem>

@code {
    [Inject]
    ISnackbar Snackbar { get; set; }
    [Parameter]
    public Publication currentPublication { get; set; } = null!;

    [Parameter]
    public EventCallback<ResearchArea> OnValidSubmit { get; set; }

    public IList<ResearchAreaPublication> _areasIds = new List<ResearchAreaPublication>();
    public IList<ResearchArea> _areas = new List<ResearchArea>();
    private bool _newArea { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _areasIds = await PublicationService.GetAssociatedAreas(currentPublication.Id);

        foreach (var item in _areasIds)
        {
            _areas.Add(await ResearchAreaService.GetResearchAreaByIdAsync(item.ResearchAreasId));
        }

        if (currentPublication is null)
            throw new ArgumentNullException(nameof(currentPublication));

        //return base.OnInitializedAsync();
    }

    public async Task AddAreaToPublication()
    {
        ToggleOverlay();
        return;
    }

    public void ToggleOverlay()
    {
        _newArea = !_newArea;
        this.StateHasChanged();
    }

    public async Task RefreshState()
    {

        _areasIds = await PublicationService.GetAssociatedAreas(currentPublication.Id);
        _areas.Clear();

        foreach (var item in _areasIds)
        {
            _areas.Add(await ResearchAreaService.GetResearchAreaByIdAsync(item.ResearchAreasId));
        }

        StateHasChanged();
    }

    private async Task DeassociateAreasFromPublication(MudChip Chip)
    {
        int removed = 0;

        foreach (var a in _areas)
        {
            if (a.Name.ToString().Equals(Chip.Text))
            {

                await PublicationService.DeleteAssociatedArea(currentPublication.Id, a.Id);
                removed++;
                break;
            }
        }

        if (removed == 1)
            Snackbar.Add($"Se desasoció el subárea {Chip.Text} de la publicación", Severity.Success);
        else
            Snackbar.Add("No se pudo desasociar el subárea {Chip.Text}.", Severity.Error);

        await RefreshState();
    }

}
